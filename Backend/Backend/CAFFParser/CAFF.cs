//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Backend.CAFFParser {

public class CAFF : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CAFF(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CAFF obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(CAFF obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~CAFF() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CAFFParserPINVOKE.delete_CAFF(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public static CAFF parseCAFF(BytesVector bytes) {
    CAFF ret = new CAFF(CAFFParserPINVOKE.CAFF_parseCAFF(BytesVector.getCPtr(bytes)), true);
    if (CAFFParserPINVOKE.SWIGPendingException.Pending) throw CAFFParserPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ulong getNumberOfAnimations() {
    ulong ret = CAFFParserPINVOKE.CAFF_getNumberOfAnimations(swigCPtr);
    return ret;
  }

  public DateTime getCreationDate() {
    DateTime ret = new DateTime(CAFFParserPINVOKE.CAFF_getCreationDate(swigCPtr), false);
    return ret;
  }

  public string getCreator() {
    string ret = CAFFParserPINVOKE.CAFF_getCreator(swigCPtr);
    return ret;
  }

  public CIFFAndDurationVector getCiffsWithDuration() {
    CIFFAndDurationVector ret = new CIFFAndDurationVector(CAFFParserPINVOKE.CAFF_getCiffsWithDuration(swigCPtr), false);
    return ret;
  }

  public bool isValid() {
    bool ret = CAFFParserPINVOKE.CAFF_isValid(swigCPtr);
    return ret;
  }

  public BytesVector generatePpmPreview() {
    BytesVector ret = new BytesVector(CAFFParserPINVOKE.CAFF_generatePpmPreview(swigCPtr), true);
    return ret;
  }

  public string generateMetaDataJson() {
    string ret = CAFFParserPINVOKE.CAFF_generateMetaDataJson(swigCPtr);
    return ret;
  }

  public StringVector getParseFails() {
    StringVector ret = new StringVector(CAFFParserPINVOKE.CAFF_getParseFails(swigCPtr), false);
    return ret;
  }

}

}
