/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040100
#define SWIGCSHARP

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_CAFFParser(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_CAFFParser(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_CAFFParser(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } } while (0)

/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#include <string>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>


SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <typeinfo>
#include <stdexcept>


#include <utility>


#include <stdint.h>		// Use the C99 official header


  #include "ciff.h"


  #include "date_time.h"


  #include "caff.h"


  #include "endianess.h"

SWIGINTERN std::vector< uint8_t > *new_std_vector_Sl_uint8_t_Sg___SWIG_2(int capacity){
        std::vector< unsigned char >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< unsigned char >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN unsigned char std_vector_Sl_uint8_t_Sg__getitemcopy(std::vector< uint8_t > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< unsigned char >::value_type const &std_vector_Sl_uint8_t_Sg__getitem(std::vector< uint8_t > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint8_t_Sg__setitem(std::vector< uint8_t > *self,int index,unsigned char const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint8_t_Sg__AddRange(std::vector< uint8_t > *self,std::vector< unsigned char > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< unsigned char > *std_vector_Sl_uint8_t_Sg__GetRange(std::vector< uint8_t > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< unsigned char >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_uint8_t_Sg__Insert(std::vector< uint8_t > *self,int index,unsigned char const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint8_t_Sg__InsertRange(std::vector< uint8_t > *self,int index,std::vector< unsigned char > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint8_t_Sg__RemoveAt(std::vector< uint8_t > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint8_t_Sg__RemoveRange(std::vector< uint8_t > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< unsigned char > *std_vector_Sl_uint8_t_Sg__Repeat(unsigned char const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< unsigned char >(count, value);
      }
SWIGINTERN void std_vector_Sl_uint8_t_Sg__Reverse__SWIG_0(std::vector< uint8_t > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_uint8_t_Sg__Reverse__SWIG_1(std::vector< uint8_t > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_uint8_t_Sg__SetRange(std::vector< uint8_t > *self,int index,std::vector< unsigned char > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_uint8_t_Sg__Contains(std::vector< uint8_t > *self,unsigned char const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_uint8_t_Sg__IndexOf(std::vector< uint8_t > *self,unsigned char const &value){
        int index = -1;
        std::vector< unsigned char >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_uint8_t_Sg__LastIndexOf(std::vector< uint8_t > *self,unsigned char const &value){
        int index = -1;
        std::vector< unsigned char >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_uint8_t_Sg__Remove(std::vector< uint8_t > *self,unsigned char const &value){
        std::vector< unsigned char >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< std::string > *new_std_vector_Sl_std_string_Sg___SWIG_2(int capacity){
        std::vector< std::string >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< std::string >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN std::string std_vector_Sl_std_string_Sg__getitemcopy(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< std::string >::value_type const &std_vector_Sl_std_string_Sg__getitem(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__setitem(std::vector< std::string > *self,int index,std::string const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__AddRange(std::vector< std::string > *self,std::vector< std::string > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< std::string > *std_vector_Sl_std_string_Sg__GetRange(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< std::string >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Insert(std::vector< std::string > *self,int index,std::string const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__InsertRange(std::vector< std::string > *self,int index,std::vector< std::string > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__RemoveAt(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__RemoveRange(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::string > *std_vector_Sl_std_string_Sg__Repeat(std::string const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< std::string >(count, value);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Reverse__SWIG_0(std::vector< std::string > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Reverse__SWIG_1(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__SetRange(std::vector< std::string > *self,int index,std::vector< std::string > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_std_string_Sg__Contains(std::vector< std::string > *self,std::string const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_std_string_Sg__IndexOf(std::vector< std::string > *self,std::string const &value){
        int index = -1;
        std::vector< std::string >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_std_string_Sg__LastIndexOf(std::vector< std::string > *self,std::string const &value){
        int index = -1;
        std::vector< std::string >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_std_string_Sg__Remove(std::vector< std::string > *self,std::string const &value){
        std::vector< std::string >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< std::pair< int64_t,CIFF > > *new_std_vector_Sl_std_pair_Sl_int64_t_Sc_CIFF_Sg__Sg___SWIG_2(int capacity){
        std::vector< std::pair< int64_t,CIFF > >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< std::pair< int64_t,CIFF > >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN std::pair< int64_t,CIFF > std_vector_Sl_std_pair_Sl_int64_t_Sc_CIFF_Sg__Sg__getitemcopy(std::vector< std::pair< int64_t,CIFF > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< std::pair< long long,CIFF > >::value_type const &std_vector_Sl_std_pair_Sl_int64_t_Sc_CIFF_Sg__Sg__getitem(std::vector< std::pair< int64_t,CIFF > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_int64_t_Sc_CIFF_Sg__Sg__setitem(std::vector< std::pair< int64_t,CIFF > > *self,int index,std::pair< int64_t,CIFF > const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_int64_t_Sc_CIFF_Sg__Sg__AddRange(std::vector< std::pair< int64_t,CIFF > > *self,std::vector< std::pair< int64_t,CIFF > > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< std::pair< int64_t,CIFF > > *std_vector_Sl_std_pair_Sl_int64_t_Sc_CIFF_Sg__Sg__GetRange(std::vector< std::pair< int64_t,CIFF > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< std::pair< int64_t,CIFF > >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_int64_t_Sc_CIFF_Sg__Sg__Insert(std::vector< std::pair< int64_t,CIFF > > *self,int index,std::pair< int64_t,CIFF > const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_int64_t_Sc_CIFF_Sg__Sg__InsertRange(std::vector< std::pair< int64_t,CIFF > > *self,int index,std::vector< std::pair< int64_t,CIFF > > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_int64_t_Sc_CIFF_Sg__Sg__RemoveAt(std::vector< std::pair< int64_t,CIFF > > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_int64_t_Sc_CIFF_Sg__Sg__RemoveRange(std::vector< std::pair< int64_t,CIFF > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::pair< int64_t,CIFF > > *std_vector_Sl_std_pair_Sl_int64_t_Sc_CIFF_Sg__Sg__Repeat(std::pair< int64_t,CIFF > const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< std::pair< int64_t,CIFF > >(count, value);
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_int64_t_Sc_CIFF_Sg__Sg__Reverse__SWIG_0(std::vector< std::pair< int64_t,CIFF > > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_int64_t_Sc_CIFF_Sg__Sg__Reverse__SWIG_1(std::vector< std::pair< int64_t,CIFF > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_int64_t_Sc_CIFF_Sg__Sg__SetRange(std::vector< std::pair< int64_t,CIFF > > *self,int index,std::vector< std::pair< int64_t,CIFF > > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_BackendfCAFFParser_CIFF_parseCIFF___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< uint8_t > arg1 ;
  Endianess arg2 ;
  std::vector< uint8_t > *argp1 ;
  SwigValueWrapper< CIFF > result;
  
  argp1 = (std::vector< uint8_t > *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< uint8_t >", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (Endianess)jarg2; 
  result = CIFF::parseCIFF(SWIG_STD_MOVE(arg1),arg2);
  jresult = new CIFF(result); 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_BackendfCAFFParser_CIFF_getHeaderSize___(void * jarg1) {
  long long jresult ;
  CIFF *arg1 = (CIFF *) 0 ;
  int64_t result;
  
  arg1 = (CIFF *)jarg1; 
  result = (int64_t)((CIFF const *)arg1)->getHeaderSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_BackendfCAFFParser_CIFF_getContentSize___(void * jarg1) {
  long long jresult ;
  CIFF *arg1 = (CIFF *) 0 ;
  int64_t result;
  
  arg1 = (CIFF *)jarg1; 
  result = (int64_t)((CIFF const *)arg1)->getContentSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_BackendfCAFFParser_CIFF_getImageWidth___(void * jarg1) {
  long long jresult ;
  CIFF *arg1 = (CIFF *) 0 ;
  int64_t result;
  
  arg1 = (CIFF *)jarg1; 
  result = (int64_t)((CIFF const *)arg1)->getImageWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_BackendfCAFFParser_CIFF_getImageHeight___(void * jarg1) {
  long long jresult ;
  CIFF *arg1 = (CIFF *) 0 ;
  int64_t result;
  
  arg1 = (CIFF *)jarg1; 
  result = (int64_t)((CIFF const *)arg1)->getImageHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_BackendfCAFFParser_CIFF_getCaption___(void * jarg1) {
  const char * jresult ;
  CIFF *arg1 = (CIFF *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (CIFF *)jarg1; 
  result = (std::string *) &((CIFF const *)arg1)->getCaption();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BackendfCAFFParser_CIFF_getTags___(void * jarg1) {
  void * jresult ;
  CIFF *arg1 = (CIFF *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (CIFF *)jarg1; 
  result = (std::vector< std::string > *) &((CIFF const *)arg1)->getTags();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BackendfCAFFParser_CIFF_getPixels___(void * jarg1) {
  void * jresult ;
  CIFF *arg1 = (CIFF *) 0 ;
  std::vector< uint8_t > *result = 0 ;
  
  arg1 = (CIFF *)jarg1; 
  result = (std::vector< uint8_t > *) &((CIFF const *)arg1)->getPixels();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BackendfCAFFParser_CIFF_isValid___(void * jarg1) {
  unsigned int jresult ;
  CIFF *arg1 = (CIFF *) 0 ;
  bool result;
  
  arg1 = (CIFF *)jarg1; 
  result = (bool)((CIFF const *)arg1)->isValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BackendfCAFFParser_CIFF_getParseFails___(void * jarg1) {
  void * jresult ;
  CIFF *arg1 = (CIFF *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (CIFF *)jarg1; 
  result = (std::vector< std::string > *) &((CIFF const *)arg1)->getParseFails();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackendfCAFFParser_delete_CIFF___(void * jarg1) {
  CIFF *arg1 = (CIFF *) 0 ;
  
  arg1 = (CIFF *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackendfCAFFParser_DateTime_year_set___(void * jarg1, unsigned short jarg2) {
  DateTime *arg1 = (DateTime *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (DateTime *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->year = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_BackendfCAFFParser_DateTime_year_get___(void * jarg1) {
  unsigned short jresult ;
  DateTime *arg1 = (DateTime *) 0 ;
  uint16_t result;
  
  arg1 = (DateTime *)jarg1; 
  result = (uint16_t) ((arg1)->year);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackendfCAFFParser_DateTime_month_set___(void * jarg1, unsigned char jarg2) {
  DateTime *arg1 = (DateTime *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (DateTime *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->month = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_BackendfCAFFParser_DateTime_month_get___(void * jarg1) {
  unsigned char jresult ;
  DateTime *arg1 = (DateTime *) 0 ;
  uint8_t result;
  
  arg1 = (DateTime *)jarg1; 
  result = (uint8_t) ((arg1)->month);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackendfCAFFParser_DateTime_day_set___(void * jarg1, unsigned char jarg2) {
  DateTime *arg1 = (DateTime *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (DateTime *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->day = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_BackendfCAFFParser_DateTime_day_get___(void * jarg1) {
  unsigned char jresult ;
  DateTime *arg1 = (DateTime *) 0 ;
  uint8_t result;
  
  arg1 = (DateTime *)jarg1; 
  result = (uint8_t) ((arg1)->day);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackendfCAFFParser_DateTime_hour_set___(void * jarg1, unsigned char jarg2) {
  DateTime *arg1 = (DateTime *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (DateTime *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->hour = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_BackendfCAFFParser_DateTime_hour_get___(void * jarg1) {
  unsigned char jresult ;
  DateTime *arg1 = (DateTime *) 0 ;
  uint8_t result;
  
  arg1 = (DateTime *)jarg1; 
  result = (uint8_t) ((arg1)->hour);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackendfCAFFParser_DateTime_minute_set___(void * jarg1, unsigned char jarg2) {
  DateTime *arg1 = (DateTime *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (DateTime *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->minute = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_BackendfCAFFParser_DateTime_minute_get___(void * jarg1) {
  unsigned char jresult ;
  DateTime *arg1 = (DateTime *) 0 ;
  uint8_t result;
  
  arg1 = (DateTime *)jarg1; 
  result = (uint8_t) ((arg1)->minute);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BackendfCAFFParser_new_DateTime___() {
  void * jresult ;
  DateTime *result = 0 ;
  
  result = (DateTime *)new DateTime();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackendfCAFFParser_delete_DateTime___(void * jarg1) {
  DateTime *arg1 = (DateTime *) 0 ;
  
  arg1 = (DateTime *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BackendfCAFFParser_CAFF_parseCAFF___(void * jarg1) {
  void * jresult ;
  std::vector< uint8_t > arg1 ;
  std::vector< uint8_t > *argp1 ;
  SwigValueWrapper< CAFF > result;
  
  argp1 = (std::vector< uint8_t > *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< uint8_t >", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = CAFF::parseCAFF(SWIG_STD_MOVE(arg1));
  jresult = new CAFF(result); 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_BackendfCAFFParser_CAFF_getNumberOfAnimations___(void * jarg1) {
  unsigned long long jresult ;
  CAFF *arg1 = (CAFF *) 0 ;
  uint64_t result;
  
  arg1 = (CAFF *)jarg1; 
  result = (uint64_t)((CAFF const *)arg1)->getNumberOfAnimations();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BackendfCAFFParser_CAFF_getCreationDate___(void * jarg1) {
  void * jresult ;
  CAFF *arg1 = (CAFF *) 0 ;
  DateTime *result = 0 ;
  
  arg1 = (CAFF *)jarg1; 
  result = (DateTime *) &((CAFF const *)arg1)->getCreationDate();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_BackendfCAFFParser_CAFF_getCreator___(void * jarg1) {
  const char * jresult ;
  CAFF *arg1 = (CAFF *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (CAFF *)jarg1; 
  result = (std::string *) &((CAFF const *)arg1)->getCreator();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BackendfCAFFParser_CAFF_getCiffsWithDuration___(void * jarg1) {
  void * jresult ;
  CAFF *arg1 = (CAFF *) 0 ;
  std::vector< std::pair< int64_t,CIFF > > *result = 0 ;
  
  arg1 = (CAFF *)jarg1; 
  result = (std::vector< std::pair< int64_t,CIFF > > *) &((CAFF const *)arg1)->getCiffsWithDuration();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BackendfCAFFParser_CAFF_isValid___(void * jarg1) {
  unsigned int jresult ;
  CAFF *arg1 = (CAFF *) 0 ;
  bool result;
  
  arg1 = (CAFF *)jarg1; 
  result = (bool)((CAFF const *)arg1)->isValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BackendfCAFFParser_CAFF_generatePpmPreview___(void * jarg1) {
  void * jresult ;
  CAFF *arg1 = (CAFF *) 0 ;
  std::vector< uint8_t > result;
  
  arg1 = (CAFF *)jarg1; 
  result = (arg1)->generatePpmPreview();
  jresult = new std::vector< uint8_t >(result); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_BackendfCAFFParser_CAFF_generateMetaDataJson___(void * jarg1) {
  const char * jresult ;
  CAFF *arg1 = (CAFF *) 0 ;
  std::string result;
  
  arg1 = (CAFF *)jarg1; 
  result = (arg1)->generateMetaDataJson();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BackendfCAFFParser_CAFF_getParseFails___(void * jarg1) {
  void * jresult ;
  CAFF *arg1 = (CAFF *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (CAFF *)jarg1; 
  result = (std::vector< std::string > *) &((CAFF const *)arg1)->getParseFails();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackendfCAFFParser_delete_CAFF___(void * jarg1) {
  CAFF *arg1 = (CAFF *) 0 ;
  
  arg1 = (CAFF *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackendfCAFFParser_BytesVector_Clear___(void * jarg1) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackendfCAFFParser_BytesVector_Add___(void * jarg1, unsigned char jarg2) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  temp2 = (unsigned char)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((unsigned char const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_BackendfCAFFParser_BytesVector_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  std::vector< unsigned char >::size_type result;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  result = ((std::vector< uint8_t > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_BackendfCAFFParser_BytesVector_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  std::vector< unsigned char >::size_type result;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  result = ((std::vector< uint8_t > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackendfCAFFParser_BytesVector_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  std::vector< unsigned char >::size_type arg2 ;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  arg2 = (std::vector< unsigned char >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BackendfCAFFParser_new_BytesVector__SWIG_0___() {
  void * jresult ;
  std::vector< uint8_t > *result = 0 ;
  
  result = (std::vector< uint8_t > *)new std::vector< uint8_t >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BackendfCAFFParser_new_BytesVector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< uint8_t > *arg1 = 0 ;
  std::vector< uint8_t > *result = 0 ;
  
  arg1 = (std::vector< uint8_t > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< uint8_t > const & is null", 0);
    return 0;
  } 
  result = (std::vector< uint8_t > *)new std::vector< uint8_t >((std::vector< uint8_t > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BackendfCAFFParser_new_BytesVector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< uint8_t > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< uint8_t > *)new_std_vector_Sl_uint8_t_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_BackendfCAFFParser_BytesVector_getitemcopy___(void * jarg1, int jarg2) {
  unsigned char jresult ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  int arg2 ;
  unsigned char result;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (unsigned char)std_vector_Sl_uint8_t_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_BackendfCAFFParser_BytesVector_getitem___(void * jarg1, int jarg2) {
  unsigned char jresult ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  int arg2 ;
  std::vector< unsigned char >::value_type *result = 0 ;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< unsigned char >::value_type *) &std_vector_Sl_uint8_t_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackendfCAFFParser_BytesVector_setitem___(void * jarg1, int jarg2, unsigned char jarg3) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  int arg2 ;
  unsigned char *arg3 = 0 ;
  unsigned char temp3 ;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (unsigned char)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_uint8_t_Sg__setitem(arg1,arg2,(unsigned char const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackendfCAFFParser_BytesVector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  std::vector< unsigned char > *arg2 = 0 ;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  arg2 = (std::vector< unsigned char > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned char > const & is null", 0);
    return ;
  } 
  std_vector_Sl_uint8_t_Sg__AddRange(arg1,(std::vector< unsigned char > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BackendfCAFFParser_BytesVector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< unsigned char > *result = 0 ;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< unsigned char > *)std_vector_Sl_uint8_t_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackendfCAFFParser_BytesVector_Insert___(void * jarg1, int jarg2, unsigned char jarg3) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  int arg2 ;
  unsigned char *arg3 = 0 ;
  unsigned char temp3 ;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (unsigned char)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_uint8_t_Sg__Insert(arg1,arg2,(unsigned char const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackendfCAFFParser_BytesVector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  int arg2 ;
  std::vector< unsigned char > *arg3 = 0 ;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< unsigned char > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned char > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_uint8_t_Sg__InsertRange(arg1,arg2,(std::vector< unsigned char > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackendfCAFFParser_BytesVector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_uint8_t_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackendfCAFFParser_BytesVector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_uint8_t_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BackendfCAFFParser_BytesVector_Repeat___(unsigned char jarg1, int jarg2) {
  void * jresult ;
  unsigned char *arg1 = 0 ;
  int arg2 ;
  unsigned char temp1 ;
  std::vector< unsigned char > *result = 0 ;
  
  temp1 = (unsigned char)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< unsigned char > *)std_vector_Sl_uint8_t_Sg__Repeat((unsigned char const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackendfCAFFParser_BytesVector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  std_vector_Sl_uint8_t_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackendfCAFFParser_BytesVector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_uint8_t_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackendfCAFFParser_BytesVector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  int arg2 ;
  std::vector< unsigned char > *arg3 = 0 ;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< unsigned char > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned char > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_uint8_t_Sg__SetRange(arg1,arg2,(std::vector< unsigned char > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BackendfCAFFParser_BytesVector_Contains___(void * jarg1, unsigned char jarg2) {
  unsigned int jresult ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  bool result;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  temp2 = (unsigned char)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_uint8_t_Sg__Contains(arg1,(unsigned char const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BackendfCAFFParser_BytesVector_IndexOf___(void * jarg1, unsigned char jarg2) {
  int jresult ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  int result;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  temp2 = (unsigned char)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_uint8_t_Sg__IndexOf(arg1,(unsigned char const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BackendfCAFFParser_BytesVector_LastIndexOf___(void * jarg1, unsigned char jarg2) {
  int jresult ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  int result;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  temp2 = (unsigned char)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_uint8_t_Sg__LastIndexOf(arg1,(unsigned char const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BackendfCAFFParser_BytesVector_Remove___(void * jarg1, unsigned char jarg2) {
  unsigned int jresult ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  bool result;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  temp2 = (unsigned char)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_uint8_t_Sg__Remove(arg1,(unsigned char const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackendfCAFFParser_delete_BytesVector___(void * jarg1) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  
  arg1 = (std::vector< uint8_t > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackendfCAFFParser_StringVector_Clear___(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackendfCAFFParser_StringVector_Add___(void * jarg1, const char * jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->push_back((std::string const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_BackendfCAFFParser_StringVector_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  result = ((std::vector< std::string > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_BackendfCAFFParser_StringVector_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackendfCAFFParser_StringVector_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BackendfCAFFParser_new_StringVector__SWIG_0___() {
  void * jresult ;
  std::vector< std::string > *result = 0 ;
  
  result = (std::vector< std::string > *)new std::vector< std::string >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BackendfCAFFParser_new_StringVector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< std::string > *arg1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & is null", 0);
    return 0;
  } 
  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BackendfCAFFParser_new_StringVector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< std::string > *)new_std_vector_Sl_std_string_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_BackendfCAFFParser_StringVector_getitemcopy___(void * jarg1, int jarg2) {
  const char * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_std_string_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_BackendfCAFFParser_StringVector_getitem___(void * jarg1, int jarg2) {
  const char * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackendfCAFFParser_StringVector_setitem___(void * jarg1, int jarg2, const char * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    std_vector_Sl_std_string_Sg__setitem(arg1,arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackendfCAFFParser_StringVector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & is null", 0);
    return ;
  } 
  std_vector_Sl_std_string_Sg__AddRange(arg1,(std::vector< std::string > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BackendfCAFFParser_StringVector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< std::string > *)std_vector_Sl_std_string_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackendfCAFFParser_StringVector_Insert___(void * jarg1, int jarg2, const char * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    std_vector_Sl_std_string_Sg__Insert(arg1,arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackendfCAFFParser_StringVector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_string_Sg__InsertRange(arg1,arg2,(std::vector< std::string > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackendfCAFFParser_StringVector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_std_string_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackendfCAFFParser_StringVector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_string_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BackendfCAFFParser_StringVector_Repeat___(const char * jarg1, int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  int arg2 ;
  std::vector< std::string > *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string > *)std_vector_Sl_std_string_Sg__Repeat((std::string const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackendfCAFFParser_StringVector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  std_vector_Sl_std_string_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackendfCAFFParser_StringVector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_string_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackendfCAFFParser_StringVector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_string_Sg__SetRange(arg1,arg2,(std::vector< std::string > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BackendfCAFFParser_StringVector_Contains___(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_vector_Sl_std_string_Sg__Contains(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BackendfCAFFParser_StringVector_IndexOf___(void * jarg1, const char * jarg2) {
  int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)std_vector_Sl_std_string_Sg__IndexOf(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BackendfCAFFParser_StringVector_LastIndexOf___(void * jarg1, const char * jarg2) {
  int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)std_vector_Sl_std_string_Sg__LastIndexOf(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BackendfCAFFParser_StringVector_Remove___(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_vector_Sl_std_string_Sg__Remove(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackendfCAFFParser_delete_StringVector___(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BackendfCAFFParser_new_CIFFAndDuration__SWIG_0___(long long jarg1, void * jarg2) {
  void * jresult ;
  long long arg1 ;
  SwigValueWrapper< CIFF > arg2 ;
  CIFF *argp2 ;
  std::pair< int64_t,CIFF > *result = 0 ;
  
  arg1 = (long long)jarg1; 
  argp2 = (CIFF *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null CIFF", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (std::pair< int64_t,CIFF > *)new std::pair< int64_t,CIFF >(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BackendfCAFFParser_new_CIFFAndDuration__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::pair< int64_t,CIFF > *arg1 = 0 ;
  std::pair< int64_t,CIFF > *result = 0 ;
  
  arg1 = (std::pair< int64_t,CIFF > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< int64_t,CIFF > const & is null", 0);
    return 0;
  } 
  result = (std::pair< int64_t,CIFF > *)new std::pair< int64_t,CIFF >((std::pair< int64_t,CIFF > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackendfCAFFParser_CIFFAndDuration_first_set___(void * jarg1, long long jarg2) {
  std::pair< int64_t,CIFF > *arg1 = (std::pair< int64_t,CIFF > *) 0 ;
  long long arg2 ;
  
  arg1 = (std::pair< int64_t,CIFF > *)jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->first = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_BackendfCAFFParser_CIFFAndDuration_first_get___(void * jarg1) {
  long long jresult ;
  std::pair< int64_t,CIFF > *arg1 = (std::pair< int64_t,CIFF > *) 0 ;
  long long result;
  
  arg1 = (std::pair< int64_t,CIFF > *)jarg1; 
  result = (long long) ((arg1)->first);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackendfCAFFParser_CIFFAndDuration_second_set___(void * jarg1, void * jarg2) {
  std::pair< int64_t,CIFF > *arg1 = (std::pair< int64_t,CIFF > *) 0 ;
  CIFF *arg2 = (CIFF *) 0 ;
  
  arg1 = (std::pair< int64_t,CIFF > *)jarg1; 
  arg2 = (CIFF *)jarg2; 
  if (arg1) (arg1)->second = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BackendfCAFFParser_CIFFAndDuration_second_get___(void * jarg1) {
  void * jresult ;
  std::pair< int64_t,CIFF > *arg1 = (std::pair< int64_t,CIFF > *) 0 ;
  CIFF *result = 0 ;
  
  arg1 = (std::pair< int64_t,CIFF > *)jarg1; 
  result = (CIFF *)& ((arg1)->second);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackendfCAFFParser_delete_CIFFAndDuration___(void * jarg1) {
  std::pair< int64_t,CIFF > *arg1 = (std::pair< int64_t,CIFF > *) 0 ;
  
  arg1 = (std::pair< int64_t,CIFF > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackendfCAFFParser_CIFFAndDurationVector_Clear___(void * jarg1) {
  std::vector< std::pair< int64_t,CIFF > > *arg1 = (std::vector< std::pair< int64_t,CIFF > > *) 0 ;
  
  arg1 = (std::vector< std::pair< int64_t,CIFF > > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackendfCAFFParser_CIFFAndDurationVector_Add___(void * jarg1, void * jarg2) {
  std::vector< std::pair< int64_t,CIFF > > *arg1 = (std::vector< std::pair< int64_t,CIFF > > *) 0 ;
  std::pair< int64_t,CIFF > *arg2 = 0 ;
  
  arg1 = (std::vector< std::pair< int64_t,CIFF > > *)jarg1; 
  arg2 = (std::pair< int64_t,CIFF > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< int64_t,CIFF > const & is null", 0);
    return ;
  } 
  (arg1)->push_back((std::pair< int64_t,CIFF > const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_BackendfCAFFParser_CIFFAndDurationVector_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::pair< int64_t,CIFF > > *arg1 = (std::vector< std::pair< int64_t,CIFF > > *) 0 ;
  std::vector< std::pair< long long,CIFF > >::size_type result;
  
  arg1 = (std::vector< std::pair< int64_t,CIFF > > *)jarg1; 
  result = ((std::vector< std::pair< int64_t,CIFF > > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_BackendfCAFFParser_CIFFAndDurationVector_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::pair< int64_t,CIFF > > *arg1 = (std::vector< std::pair< int64_t,CIFF > > *) 0 ;
  std::vector< std::pair< long long,CIFF > >::size_type result;
  
  arg1 = (std::vector< std::pair< int64_t,CIFF > > *)jarg1; 
  result = ((std::vector< std::pair< int64_t,CIFF > > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackendfCAFFParser_CIFFAndDurationVector_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< std::pair< int64_t,CIFF > > *arg1 = (std::vector< std::pair< int64_t,CIFF > > *) 0 ;
  std::vector< std::pair< long long,CIFF > >::size_type arg2 ;
  
  arg1 = (std::vector< std::pair< int64_t,CIFF > > *)jarg1; 
  arg2 = (std::vector< std::pair< long long,CIFF > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BackendfCAFFParser_new_CIFFAndDurationVector__SWIG_0___() {
  void * jresult ;
  std::vector< std::pair< int64_t,CIFF > > *result = 0 ;
  
  result = (std::vector< std::pair< int64_t,CIFF > > *)new std::vector< std::pair< int64_t,CIFF > >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BackendfCAFFParser_new_CIFFAndDurationVector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< std::pair< int64_t,CIFF > > *arg1 = 0 ;
  std::vector< std::pair< int64_t,CIFF > > *result = 0 ;
  
  arg1 = (std::vector< std::pair< int64_t,CIFF > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< int64_t,CIFF > > const & is null", 0);
    return 0;
  } 
  result = (std::vector< std::pair< int64_t,CIFF > > *)new std::vector< std::pair< int64_t,CIFF > >((std::vector< std::pair< int64_t,CIFF > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BackendfCAFFParser_new_CIFFAndDurationVector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< std::pair< int64_t,CIFF > > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< std::pair< int64_t,CIFF > > *)new_std_vector_Sl_std_pair_Sl_int64_t_Sc_CIFF_Sg__Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BackendfCAFFParser_CIFFAndDurationVector_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::pair< int64_t,CIFF > > *arg1 = (std::vector< std::pair< int64_t,CIFF > > *) 0 ;
  int arg2 ;
  SwigValueWrapper< std::pair< long long,CIFF > > result;
  
  arg1 = (std::vector< std::pair< int64_t,CIFF > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_std_pair_Sl_int64_t_Sc_CIFF_Sg__Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new std::pair< int64_t,CIFF >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BackendfCAFFParser_CIFFAndDurationVector_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::pair< int64_t,CIFF > > *arg1 = (std::vector< std::pair< int64_t,CIFF > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< long long,CIFF > >::value_type *result = 0 ;
  
  arg1 = (std::vector< std::pair< int64_t,CIFF > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::pair< long long,CIFF > >::value_type *) &std_vector_Sl_std_pair_Sl_int64_t_Sc_CIFF_Sg__Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackendfCAFFParser_CIFFAndDurationVector_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::pair< int64_t,CIFF > > *arg1 = (std::vector< std::pair< int64_t,CIFF > > *) 0 ;
  int arg2 ;
  std::pair< int64_t,CIFF > *arg3 = 0 ;
  
  arg1 = (std::vector< std::pair< int64_t,CIFF > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::pair< int64_t,CIFF > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< int64_t,CIFF > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_pair_Sl_int64_t_Sc_CIFF_Sg__Sg__setitem(arg1,arg2,(std::pair< long long,CIFF > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackendfCAFFParser_CIFFAndDurationVector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< std::pair< int64_t,CIFF > > *arg1 = (std::vector< std::pair< int64_t,CIFF > > *) 0 ;
  std::vector< std::pair< int64_t,CIFF > > *arg2 = 0 ;
  
  arg1 = (std::vector< std::pair< int64_t,CIFF > > *)jarg1; 
  arg2 = (std::vector< std::pair< int64_t,CIFF > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< int64_t,CIFF > > const & is null", 0);
    return ;
  } 
  std_vector_Sl_std_pair_Sl_int64_t_Sc_CIFF_Sg__Sg__AddRange(arg1,(std::vector< std::pair< long long,CIFF > > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BackendfCAFFParser_CIFFAndDurationVector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< std::pair< int64_t,CIFF > > *arg1 = (std::vector< std::pair< int64_t,CIFF > > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::pair< int64_t,CIFF > > *result = 0 ;
  
  arg1 = (std::vector< std::pair< int64_t,CIFF > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< std::pair< int64_t,CIFF > > *)std_vector_Sl_std_pair_Sl_int64_t_Sc_CIFF_Sg__Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackendfCAFFParser_CIFFAndDurationVector_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::pair< int64_t,CIFF > > *arg1 = (std::vector< std::pair< int64_t,CIFF > > *) 0 ;
  int arg2 ;
  std::pair< int64_t,CIFF > *arg3 = 0 ;
  
  arg1 = (std::vector< std::pair< int64_t,CIFF > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::pair< int64_t,CIFF > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< int64_t,CIFF > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_pair_Sl_int64_t_Sc_CIFF_Sg__Sg__Insert(arg1,arg2,(std::pair< long long,CIFF > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackendfCAFFParser_CIFFAndDurationVector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::pair< int64_t,CIFF > > *arg1 = (std::vector< std::pair< int64_t,CIFF > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< int64_t,CIFF > > *arg3 = 0 ;
  
  arg1 = (std::vector< std::pair< int64_t,CIFF > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::pair< int64_t,CIFF > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< int64_t,CIFF > > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_pair_Sl_int64_t_Sc_CIFF_Sg__Sg__InsertRange(arg1,arg2,(std::vector< std::pair< long long,CIFF > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackendfCAFFParser_CIFFAndDurationVector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< std::pair< int64_t,CIFF > > *arg1 = (std::vector< std::pair< int64_t,CIFF > > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< std::pair< int64_t,CIFF > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_std_pair_Sl_int64_t_Sc_CIFF_Sg__Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackendfCAFFParser_CIFFAndDurationVector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::pair< int64_t,CIFF > > *arg1 = (std::vector< std::pair< int64_t,CIFF > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::pair< int64_t,CIFF > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_pair_Sl_int64_t_Sc_CIFF_Sg__Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BackendfCAFFParser_CIFFAndDurationVector_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  std::pair< int64_t,CIFF > *arg1 = 0 ;
  int arg2 ;
  std::vector< std::pair< int64_t,CIFF > > *result = 0 ;
  
  arg1 = (std::pair< int64_t,CIFF > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< int64_t,CIFF > const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::pair< int64_t,CIFF > > *)std_vector_Sl_std_pair_Sl_int64_t_Sc_CIFF_Sg__Sg__Repeat((std::pair< long long,CIFF > const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackendfCAFFParser_CIFFAndDurationVector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< std::pair< int64_t,CIFF > > *arg1 = (std::vector< std::pair< int64_t,CIFF > > *) 0 ;
  
  arg1 = (std::vector< std::pair< int64_t,CIFF > > *)jarg1; 
  std_vector_Sl_std_pair_Sl_int64_t_Sc_CIFF_Sg__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackendfCAFFParser_CIFFAndDurationVector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::pair< int64_t,CIFF > > *arg1 = (std::vector< std::pair< int64_t,CIFF > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::pair< int64_t,CIFF > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_pair_Sl_int64_t_Sc_CIFF_Sg__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackendfCAFFParser_CIFFAndDurationVector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::pair< int64_t,CIFF > > *arg1 = (std::vector< std::pair< int64_t,CIFF > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< int64_t,CIFF > > *arg3 = 0 ;
  
  arg1 = (std::vector< std::pair< int64_t,CIFF > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::pair< int64_t,CIFF > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< int64_t,CIFF > > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_pair_Sl_int64_t_Sc_CIFF_Sg__Sg__SetRange(arg1,arg2,(std::vector< std::pair< long long,CIFF > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackendfCAFFParser_delete_CIFFAndDurationVector___(void * jarg1) {
  std::vector< std::pair< int64_t,CIFF > > *arg1 = (std::vector< std::pair< int64_t,CIFF > > *) 0 ;
  
  arg1 = (std::vector< std::pair< int64_t,CIFF > > *)jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

