/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.example.hagyma.api.model


import com.squareup.moshi.Json

/**
 * 
 *
 * Values: readOnly,hidden,system,directory,archive,device,normal,temporary,sparseFile,reparsePoint,compressed,offline,notContentIndexed,encrypted,integrityStream,noScrubData
 */

enum class FileAttributes(val value: kotlin.String) {

    @Json(name = "ReadOnly")
    readOnly("ReadOnly"),

    @Json(name = "Hidden")
    hidden("Hidden"),

    @Json(name = "System")
    system("System"),

    @Json(name = "Directory")
    directory("Directory"),

    @Json(name = "Archive")
    archive("Archive"),

    @Json(name = "Device")
    device("Device"),

    @Json(name = "Normal")
    normal("Normal"),

    @Json(name = "Temporary")
    temporary("Temporary"),

    @Json(name = "SparseFile")
    sparseFile("SparseFile"),

    @Json(name = "ReparsePoint")
    reparsePoint("ReparsePoint"),

    @Json(name = "Compressed")
    compressed("Compressed"),

    @Json(name = "Offline")
    offline("Offline"),

    @Json(name = "NotContentIndexed")
    notContentIndexed("NotContentIndexed"),

    @Json(name = "Encrypted")
    encrypted("Encrypted"),

    @Json(name = "IntegrityStream")
    integrityStream("IntegrityStream"),

    @Json(name = "NoScrubData")
    noScrubData("NoScrubData");

    /**
     * Override toString() to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is FileAttributes) "$data" else null

        /**
         * Returns a valid [FileAttributes] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): FileAttributes? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

